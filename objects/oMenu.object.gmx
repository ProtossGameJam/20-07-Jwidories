<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();
draw_set_circle_precision(64);

yOff := random(2*pi);
angOff := random(2*pi);
selected := -1;
len := room_last + 2;
credits := false;
resetSelected := 0;
resetStage := 0;

_reset_yes_first := false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var
   any := keyboard_check_pressed(vk_anykey),
   inX := keyboard_check_pressed(vk_right) - keyboard_check_pressed(vk_left),
   inY := keyboard_check_pressed(vk_down) - keyboard_check_pressed(vk_up),
   confirm := keyboard_check_pressed(vk_enter) || keyboard_check_pressed(vk_space);

if(selected == -1) {
   if(any) {
      selected = 0;
      audio_play_sound(sConfirm, 0, false);
   }
} else if(credits) {
   if(confirm) {
      credits = false;
      audio_play_sound(sConfirm, 0, false);
   }
} else {
   var t := selected;
   selected = clamp(selected + inY, 0, len - 1);
   if(selected != t)
      audio_play_sound(sSelect, 0, false);
   
   if(selected != len - 1)
      resetStage = 0;
   if(resetStage != 0 &amp;&amp; inX != 0) {
      var u := resetSelected;
      resetSelected = inX == 1;
      if(resetSelected != u)
         audio_play_sound(sSelect, 0, false);
   }
   
   if(confirm) {
      switch(len - selected) {
         case 2:
            credits = true;
         break;
         case 1:
            if(resetStage == 0 || resetSelected == !_reset_yes_first)
               if(++resetStage == 3) {
                  with(oRecords)
                     event_user(1);
                  resetStage = 0;
               } else
                  resetSelected = _reset_yes_first;
            else
               resetStage = 0;
         break;
         default:
            instance_create(selected + 1, 0, oTransition);
         break;
      }
      audio_play_sound(sConfirm, 0, false);
   }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var
   baseWidth := 480, baseHeight := 64,
   baseX := room_width/2 - baseWidth/2,
   baseY := room_height*2/3 - len/2*baseHeight;

draw_sprite_ext(
   sJwidories, 0,
   room_width/2, room_height/3 + 12*sin(image_index/60 + yOff),
   1, 1, 3*sin(image_index/125 + angOff),
   $ffffff, 1
);

draw_set_font(fMain);
draw_set_valign(fa_middle);
draw_set_alpha(1);
if(selected == -1) {
   draw_set_colour($000000);
   draw_set_halign(fa_center);
   if(image_index%60 &lt; 30)
      draw_text(room_width/2, room_height*2/3, '아무 키나 누르세요!');
} else if(credits) {
   var creditsText;
   creditsText[0] = '팀 쥐돌이헌쳇바퀴에타고파';
   creditsText[1] = '독서만세(UnSa), 유코, 잇창명, 중딩프로그래머';
   creditsText[2] = '';
   creditsText[3] = '프로토스 2020-7 "기울기" 출품작';
   creditsText[4] = '사운드 출처:';
   creditsText[5] = 'opengameart.org/content/8-bit-sound-effects-library';
   creditsText[6] = 'opengameart.org/content/nintendo-style-funny-music-loop-02';
   draw_set_colour($000000);
   draw_set_halign(fa_center);
   for(var i := 0; i &lt; 7; i++) {
      draw_set_font(fMain);
      if(i == 0)
         draw_set_font(fBold);
      draw_text(room_width/2, room_height*2/3 - 63 + 18*i, creditsText[i]);
   }
} else {
   draw_set_colour($9098b8);
   if(selected == len - 1 &amp;&amp; resetStage != 0)
      draw_roundrect_ext(
         baseX + resetSelected*baseWidth/2, baseY + selected*baseHeight,
         baseX + (resetSelected + 1)*baseWidth/2 - 1, baseY + (selected + 1)*baseHeight - 1,
         8, 8, false
      );
   else
      draw_roundrect_ext(
         baseX, baseY + selected*baseHeight,
         baseX + baseWidth - 1, baseY + (selected + 1)*baseHeight - 1,
         8, 8, false
      );
   
   draw_set_colour($000000);
   draw_set_halign(fa_left);
   for(var i := 0; i &lt; len - 2; i++) {
      var nowY := baseY + i*baseHeight;
      draw_text(baseX + baseHeight/2 - 8, nowY + baseHeight/2, 'Stage ' + string(i + 1));
   }
   draw_set_halign(fa_right);
   for(var i := 0; i &lt; len - 2; i++) {
      var
         nowY := baseY + i*baseHeight,
         record = oRecords.record[i],
         str := '기록 없음',
         stars := 0;
      if(record != -1) {
         str = string_format(
            floor(10*oRecords.record[i]/room_speed)/10,
            0, 1
         ) + 's';
         stars = 1
            + (oRecords.record[i] &lt;= 60*oRecords.perfect[i])
            + (oRecords.record[i] &lt;= 60*oRecords.good[i]);
      }
      
      draw_text(
         baseX + baseWidth - baseHeight/2 - 72,
         nowY + baseHeight/2,
         str
      );
      for(var j := 0; j &lt; 3; j++)
         draw_sprite(
            sStar, j + 1 &lt;= stars,
            baseX + baseWidth - baseHeight/2 - 48 + 24*j, nowY + baseHeight/2
         );
   }
   draw_set_halign(fa_center);
   draw_text(room_width/2, baseY + (len - 1.5)*baseHeight, '크레딧');
   if(resetStage != 0) {
      var left := '아니요', right := '예', msg;
      msg[1] = '정말 초기화할까요?';
      msg[2] = '초기화하면 영영 복구할 수 없어요!';
      if(_reset_yes_first) {
         left = '예';
         right = '아니요';
      }
      draw_text(baseX + baseWidth/4, baseY + (len - 0.5)*baseHeight, left);
      draw_text(baseX + baseWidth*3/4, baseY + (len - 0.5)*baseHeight, right);
      
      draw_text(room_width/2, baseY + len*baseHeight + 12, msg[resetStage]);
   } else
      draw_text(room_width/2, baseY + (len - 0.5)*baseHeight, '기록 초기화');
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
