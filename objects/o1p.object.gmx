<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s1pStanding</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>7</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>coyote := 0;
stun := 0;
invincible := 0;

image_xscale = 1/12;
image_yscale = 1/12;
spriteDir := 0;
walkAnim := 0;
standingAnim := 0;

__sideeff_landed := false;

// Control parameters
_accX := 0.5;
_decX := 0.8;
_maxX := 3;
gravity = 0.25;
_jmpY := 8;
_maxY := 8;
_coyote := 6;
_stun_time := 60;
_stun_knockbackX := 2.5;
_stun_knockbackY := 4;
_invincible_time := 180;

_allow_jump_down := true;
_allow_jump_down_coyote := false;
_allow_escape_x := false;
_allow_escape_y := true;
_allow_stun_collection := 0; // 0 = disallow, 1 = allow while invincible, 2 = allow

_stability_check_time := 180;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var
   inX := keyboard_check(ord("D")) - keyboard_check(ord("A")),
   jump := keyboard_check_pressed(ord("W")),
   jumpDown := keyboard_check_pressed(ord("S")),
   standing := is_standing(y, 1, false),
   standingSolid := is_standing(y, 1, true),
   fell := bbox_top &gt;= room_height;

if(oJwidoriSystem.elapsedTime &lt; 0) {
   inX = 0;
   jump = 0;
   jumpDown = 0;
}

coyote++;
if(stun) { // stunned: block movement
   inX = 0;
   jump = 0;
   jumpDown = 0;
   if(--stun == 0) {
      if(bbox_top &gt;= room_width) { // respawn
         x = xstart;
         y = ystart;
      }
      invincible = _invincible_time;
   }
} else if(invincible)
   --invincible;

// apply hspeed
if(inX != 0) // move X
   hspeed = clamp(hspeed + _accX*inX, -_maxX, _maxX);
else if(stun == 0 || standing) // decelerate X
   hspeed = clamp(0, hspeed - _decX, hspeed + _decX);

// apply vspeed
if(standing) {
   if(jump) { // jump; standing
      vspeed = -_jmpY;
      coyote = _coyote;
      audio_play_sound(sJump, 0, false);
   } else if(jumpDown &amp;&amp; !standingSolid &amp;&amp; _allow_jump_down) { // jump down
      y++;
      if(!_allow_jump_down_coyote)
         coyote = _coyote;
   }
} else {
   if(jump &amp;&amp; coyote &lt;= _coyote) { // jump; coyote
      vspeed = -_jmpY;
      coyote = _coyote;
      audio_play_sound(sJump, 0, false);
   } else // fall
      vspeed = min(vspeed + gravity, _maxY);
}

update_position(_allow_escape_x, _allow_escape_y);
if(__sideeff_landed)
   coyote = 0;

// stun check
var fellNow := bbox_top &gt;= room_height;
var shouldStun := false;
if(stun == 0) {
   if(fellNow) // stun; fell down
      shouldStun = true;
   else if(invincible == 0) { // stun; by obstacle
      var spike = instance_place(x, y, oSpike);
      if(spike != noone) {
         hspeed = sign(spike.hspeed - hspeed)*_stun_knockbackX;
         if(y &lt;= spike.y)
            vspeed = -_stun_knockbackY;
         else
            vspeed = 0;
         shouldStun = true;
      }
   }
} else if(!fell &amp;&amp; fellNow) // stun; fell down while stunned
   shouldStun = true;
if(shouldStun)
   stun = _stun_time;

// apply animation
if(inX != 0) {
   if(spriteDir != inX) {
      spriteDir = inX;
      walkAnim = 0;
   } else
      walkAnim = (walkAnim + 1)%40;
   standingAnim = 0;
} else if(++standingAnim == 120)
   spriteDir = 0;

if(spriteDir == 0) {
   sprite_index = s1pStanding;
   image_single = 0;
} else {
   var
      imgOff := 3*(spriteDir == 1) + 1,
      walkOff := dcos(walkAnim div 10*90);
   if(standingAnim)
      walkOff = 0;
   sprite_index = s1p;
   image_single = imgOff + walkOff;
}

// apply alpha
if(invincible == 0)
   image_alpha = 1;
else
   image_alpha = (1 + ((invincible + 15)%16 &gt;= 8)*(3 - 2*invincible/_invincible_time))/4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>2</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.5</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>999999</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
